#!/usr/bin/env node

'use strict';

require('colors');
const Pixiv = require('../src/pxrepo');
const Tools = require('../src/tools');
const Downloader = require('../src/downloader');
const Illustrator = require('../src/illustrator');
const pkg = require('../package.json');
const Fse = require('fs-extra');
const Fs = require('fs');
const program = require('commander');
const readlinesync = require('readline-sync');
const readline = require("readline");
const Path = require('path');
const pxrepodir = Path.resolve(__dirname, '..');//pxrepo根目录
const tempdir = Path.join(pxrepodir, 'temp');//下载路径
const configFileDir = Path.join(pxrepodir, 'config');//设置路径
const { checkProxy, getSysProxy } = require('../src/proxy');
const downJson = Path.join(configFileDir, 'download.json');//下载任务
const blacklistJson = Path.join(configFileDir, 'blacklist.json');//黑名单
const historyJson = Path.join(configFileDir, 'history.json');//历史下载
const UpdateChecker = require('../src/updateChecker');
const StreamZip = require('node-stream-zip');
const shell = require("shelljs/global");


/*
 * Usage
 */


program
	.usage('<options> [value]')
	.option('--login', '登录 Pixiv')
	.option('--logout', '登出 Pixiv')
	.option('')
	.option('--setting', '打开设置')
	.option('')
	.option('-p, --pid <pid(s)>', '通过插图PID下载插图, 逗号(,)分割')
	.option('-u, --uid <uid(s)>', '通过画师UID下载插图,逗号(,)分割')
	.option('')
	.option('-f, --follow', '获取公开关注')
	.option('-F, --follow-private', '获取私密关注')
	.option('    --aptend', '继续获取新的画师信息')
	.option('    --force')
	.option('')
	.option('-b, --bookmark', '下载收藏')
	.option('-B, --bookmark-private', '下载私密收藏')
	.option('')
	.option('-U, --update', "下载插图，也可以对所有画师插图更新下载")

	.option('    --repair', '依据history.json下载，history.json保存有下载过的画师的ID')
	.option('-C, --shift', '跳过一个画师，某个画师的下载任务出错时使用，比如画师的账号被禁用')
	.option('-D, --delete', '清除未完成下载的文件')
	.option('-l, --blacklist <uid(s)>', '添加到黑名单，可以跳过该画师的下载')
	.option('')
	.option('-M, --no-ugoira-meta', '将不会为ugoira请求元数据，这有助于节省时间或避免API速率限制错误时')
	.option('')
	.option('    --no-cf', '从i.pximg.net下载插图，而不是i-cf.pximg.net')
	.option('')
	.version(pkg.version, '-v, --version')
	.parse(process.argv);
/*
 * Start
 */
const config = Pixiv.readConfig();

handleArgv()
	.then(async () => {


		//检查配置
		if (!Pixiv.checkConfig(config)) {
			console.log('\nRun ' + 'pxrepo -h'.yellow + ' for more usage information.\n');
			process.exit();
		}
		Pixiv.applyConfig(config);


		//检查更新
		const updater = new UpdateChecker();
		const updateChecking = updater.check();
		const logNewVersionAndExit = () => {
			if (updater.haveUpdate()) {
				console.log(`New version ${updater.getLatestVersion().yellow} is available.`);
				console.log(`You can upgrade via the '${'npm i -g pixivrepositories'.yellow}' command.\n`);
			}
			process.exit();
		};

		//重登陆
		const pixiv = new Pixiv();
		await pixiv.relogin();



		//开始下载
		console.log('\nDownload Path:\t'.cyan + config.download.path.toString().yellow);
		if (config.directMode) console.log('Direct Mode:\t'.cyan + 'Enabled'.yellow);
		else if (typeof config.proxy == 'string' && config.proxy.length > 0) console.log('Using Proxy:\t'.cyan + config.proxy.yellow);

		global.cf = program.cf;
		if (program.follow) {
			await pixiv.getAllMyFollow(false, program.aptend);
			
		}
		if (program.followPrivate) {
			await pixiv.getAllMyFollow(true, program.aptend);
			
		}

///////////////////////
		if (program.update)//||program.force) 
		{
			await pixiv.downloadUpdate(program.aptend);//,program.force);
		}
		if (program.repair) {
			var follows = [];
			if (Fs.existsSync(historyJson)) {
				var follows = require(historyJson);
				Fs.writeFileSync(downJson, JSON.stringify(follows));
			} else console.log("没有下载历史");
		}
/////////////////////////
		if (program.bookmark) await pixiv.downloadBookmark();
		if (program.bookmarkPrivate) await pixiv.downloadBookmark(true);

		if (program.uid) {
			//得到UID
			let uids = program.uid;
			if (typeof uids == 'string') {
				uids = uids.split(',');
				await pixiv.downloadByUIDs(uids);
			} else help();
		}
		if (program.pid) {
			//得到PID
			let pids = program.pid;
			if (typeof pids == 'string') {
				pids = pids.split(',');
				await pixiv.downloadByPIDs(pids);
			} else help();
		}

		if (!(program.follow || program.followPrivate || program.update || program.bookmark || program.bookmarkPrivate || program.uid || program.pid))
			help();

		pixiv.clearReloginInterval();
		console.log();

	})
	.catch(e => {
		console.error(e);
		
		process.exit();
	});

async function handleArgv() {
	//全局参数
	global.ugoiraMeta = program.ugoiraMeta;
	global.cf = program.cf;
	
	
	//其他选项
	let pass = false;
	if (program.login) {
		//登录
		console.log('\nPixiv Login\n'.cyan);
		const u = readlinesync.question('Username: '.yellow);
		const p = readlinesync.question('Password: '.yellow, { hideEchoBack: true });
		try {
			Pixiv.applyProxyConfig(config);
			await Pixiv.login(u, p);
			console.log('\nLogin success!\n'.green);
		} catch (error) {
			console.log('\nLogin fail!'.red, 'Please check your input or proxy setting.\n');
			if (global.p_debug) console.error(error);
		}
	}
	else if (program.logout) {
		//登出
		Pixiv.logout();
		console.log('\nLogout success!\n'.green);
	}
	else if (program.delete) {

		await Tools.readDirSync(tempdir).then(files => {
			for (let file of files) {

				Fse.removeSync(Path.join(tempdir, file));
				console.log('Delete:\t' + file);

			}
		});
	}
	else if (program.extract) {



	}
	else if (program.shift) {
		var follows = [];
		if (Fs.existsSync(downJson)) {
			var follows = require(downJson);
			console.log(follows.shift());
			Fs.writeFileSync(downJson, JSON.stringify(follows));
		}

	}
	else if (program.setting) {
		//设置
		let index;


		do {
			console.clear();
			console.log('pxrepo Options'.green);
			const sysProxy = getSysProxy();
			const options = [
				'Download path\t'.yellow + (config.download.path ? config.download.path : 'Null, please set one'.bgRed),
				'Download thread\t'.yellow + config.download.thread,
				'Auto rename\t\t'.yellow + (config.download.autoRename ? 'On' : 'Off'),
				'Proxy\t\t'.yellow + (checkProxy(config.proxy) && config.proxy ? config.proxy : checkProxy(sysProxy) && sysProxy ? `[env] ${sysProxy}` : 'disable'),
				'Direct mode\t\t'.yellow + (config.directMode ? 'Enabled' : 'Disabled'),
				];
			index = readlinesync.keyInSelect(options, 'Press a key:', {
				cancel: 'Exit'.bgMagenta,
			});


					switch (index) {
				case 0: //下载路径
					config.download.path = readlinesync.questionPath('Please input a download path:\n'.yellow, {
						isDirectory: true,
						exists: null,
						cd: false
					});
					break;

				case 1: //下载线程

					config.download.thread = getStrictIntInput(
						'Please input the number of download thread:'.yellow + config.download.thread + ' [1-90, default is 32]\n',
						{
							defaultInput: 32,
						},
						input => input >= 1 && input <= 90,
						'It must be between 1 and 90.'
					);




					break;

				case 2: //自动重命名
					config.download.autoRename = readlinesync.keyInYNStrict('Do you want to turn on auto rename?'.yellow + (config.download.autoRename ? 'On' : 'Off'));
					break;

				case 3: //代理设置
					config.proxy = readlinesync.question(
						'Please input your HTTP/SOCKS proxy like:\n'.yellow + (checkProxy(config.proxy) && config.proxy ? config.proxy : checkProxy(sysProxy) && sysProxy ? `[env] ${sysProxy}` : 'disable') +
						'  <protocol>://[user:passwd@]<ip>:<port>\n' +
						'  <protocol> can be http(s) / socks(4|4a|5|5h)\n' +
						'Example\n'.yellow +
						'http://user:passwd@127.0.0.1:1080\n' +
						'socks://127.0.0.1:1080\n' +
						'If you input nothing, pxrepo will load proxy from environment variables if avaliable.\n'.yellow +
						'If you want to DISABLE it, please input '.yellow +
						'disable'.red +
						'.\n'.yellow,
						{
							limitMessage: '\nIncorrect format, please re-input.\n'.bgRed,
							limit: checkProxy,
						});
					break;
				case 4:
					config.directMode = !config.directMode;
					break;
			} //switch end

			Pixiv.writeConfig(config);
		} while (index !== -1);

		console.log('Exit'.green);
	} else if (program.blacklist) {
		//得到UID
		let uids = program.blacklist;
		let blacklist = [];
		if (typeof uids == 'string') {
			uids = uids.split(',');

			const uidArray = Array.isArray(uids) ? uids : [uids];
			for (const uid of uidArray) {
				//添加黑名单
				if (!Fs.existsSync(blacklistJson))//如果不存在blacklistJson则创建
				{
					
					Fs.writeFileSync(blacklistJson, '[{\"id\":' + parseInt(11) + '}]');

				}
				blacklist = require(blacklistJson);
				if (!Tools.CheckExist(blacklist, uid, blacklistJson)) { console.log('将 \t (' + uid + ') \t 添加到了黑名单'); }
				else console.log('(' + uid + ')\t' + '存在于黑名单');

			}


		} else help();

	} else {
		pass = true;
	}
	if (!pass) {
		process.exit();
	}
}




function getStrictIntInput(question, option, limit, limitReply) {
	let result = readlinesync.questionInt(question, option);
	while (!limit(result)) {
		console.log('\n' + limitReply.bgRed + '\n');
		result = readlinesync.questionInt(question, option);
	}
	return result;
}


function help() {
	console.error('\nMissing arguments!'.bgRed);
	program.outputHelp();
}